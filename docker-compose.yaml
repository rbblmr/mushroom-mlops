networks:
  back-tier:
  front-tier:
  mflow-net:

volumes:
  mlflow-db-data:
  prometheus_data:
  grafana_data:
  mongo_data:

services:
  mlflow-db:
    image: postgres:14.3
    container_name: mlflow-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - "mlflow-db-data:/var/lib/postgresql/data"
    networks:
     - mflow-net

  mlflow-server:
    build:
      # context: ./app
      dockerfile: ./app/Dockerfile
    image: rbblmr/mushroom-mlops:latest
    container_name: mlflow-server
    environment:
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
    expose:
      - 5000
    ports:
      - 5000:5000
    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db:5432/${POSTGRES_DB} --default-artifact-root s3://${AWS_BUCKET_NAME}/mlflow
    depends_on:
      - mlflow-db
    networks:
     - mflow-net
    
  prefect-server:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: rbblmr/mushroom-mlops:latest
    container_name: prefect-server
    environment:
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      MLFLOW_TRACKING_URI: http://mlflow-server:5000
      EXPERIMENT_NAME: ${EXPERIMENT_NAME}
      KAGGLE_USERNAME: ${KAGGLE_USERNAME}
      KAGGLE_KEY: ${KAGGLE_KEY}
      PREFECT_API_SERVICES_FLOW_RUN_NOTIFICATIONS_ENABLED: false
    expose: 
      - 4200
    ports: 
      - 4200:4200
    command: prefect server start --host 0.0.0.0
    depends_on:
      - mlflow-server
    volumes:
      # - ./data:/app/data
      - ./app:/app
    networks:
     - mflow-net


# Monitoring service
  evidently_service:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    image: rbblmr/evidently_service:latest
    container_name: evidently_service
    expose:
      - 8085
    ports:
      - 8085:8085
    depends_on:
      - grafana
    volumes: 
      - ./data:/app/data
      - ./monitoring/metrics_app/config.yaml:/app/config.yaml
    networks:
      - back-tier
      - front-tier
    restart: always
    
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9091:9090"
    networks:
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    user: "472"
    environment:
        GF_SECURITY_ADMIN_USER: admin
        GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./monitoring/config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./monitoring/dashboards:/opt/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - back-tier
      - front-tier
    restart: always
  mongo:
    image: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - back-tier
      - front-tier

# Web service
  mushroom-web-service:
    build:
      context: app
      dockerfile: Dockerfile
    image: rbblmr/mushroom-mlops:latest
    container_name: mushroom-web-service
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      MLFLOW_TRACKING_URI: http://mlflow-server:5000
      EVIDENTLY_SERVICE: http://evidently_service:8085
      MONGODB_ADDRESS: mongodb://mongo:27017
      EXPERIMENT_NAME: ${EXPERIMENT_NAME}
    expose:
      - 9696
    ports:
      - 9696:9696
    depends_on:
      - mlflow-server
      - mongo
      - evidently_service
    command: gunicorn --bind=0.0.0.0:9696 --timeout 300 app:app
    volumes:
      - ./app:/app
    networks:
     - back-tier
     - front-tier
     - mflow-net
